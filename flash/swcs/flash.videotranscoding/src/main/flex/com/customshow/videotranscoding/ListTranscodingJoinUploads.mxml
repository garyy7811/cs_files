<?xml version="1.0"?>
<!--
  Created by gary.y on 3/23/2016.
-->
<transcoding:ListTranscoding xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:data="com.flashflexpro.as3lib.data.*"
                             sortColDesc="true" xmlns:transcoding="com.customshow.videotranscoding.*">
    <fx:Script><![CDATA[
        import com.customshow.awsS3Upload.DynaTableAwsS3Upload;
        import com.customshow.configPerClient.TranscodeConfigFormatGrid;
        import com.flashflexpro.as3lib.data.PropertyDesc;
        import com.flashflexpro.as3lib.data.PropertyDesc;
        import com.flashflexpro.as3lib.utils.RootContextModule;

        import mx.collections.IList;

        import org.apache.flex.collections.ArrayList;


        [Bindable]
        public var tranStatus:String;

        [Bindable]
        public var tranLastUpdateTime:Date;

        [Bindable]
        public var transStatusLst:IList = new ArrayList( TranscodeConfigFormatGrid.STATUS_Array.concat( [] ) );

        private static const page_size:uint = 100;

        override public function loadMore():Boolean{
            if( rpcLoadGrid != null ){
                return false;
            }
            if( tranLastUpdateTime == null ){
                tranLastUpdateTime = new Date();
            }

            var from:uint = 0;
            if( lastQueryResult != null ){
                if( lastQueryResult.length < page_size ){
                    return false;
                }
                from = rawRows.length;
            }

            const len:int = DynaTableAwsS3Upload.allProperties.length;
            for( var j:int = 0; j < len; j ++ ){
                var desc:PropertyDesc = DynaTableAwsS3Upload.allProperties[j] as PropertyDesc;
                if( desc.name == sortColDataField.dataField ){
                    rpcLoadGrid = new TranscodingService( context ).esLstByLastupdated( beforeOnLoaded, onError, from,
                            page_size, sortColDataField.dataField, sortColDesc );
                    return rpcLoadGrid.callRemote();
                }
            }

            rpcLoadGrid =
                    new TranscodingService( context ).esLstByLastupdated11( beforeOnLoaded, onError, from, page_size,
                            sortColDataField.dataField, sortColDesc );
            return rpcLoadGrid.callRemote();
        }


        override public function reloadGrid():void{
            super.reloadGrid();
            rawRows = new ArrayList();
        }

        public var rawRows:ArrayList = new ArrayList();

        private function beforeOnLoaded( rawRsltLst:IList ):void{
            var lst:ArrayList = new ArrayList();
            rawRows.addAll( rawRsltLst );

            for( var j:int = rawRsltLst.length - 1; j >= 0; j -- ){
                var rsltArr:Array = rawRsltLst.getItemAt( j ) as Array;
                var innerLst:IList = rsltArr[1];
                for( var k:int = innerLst.length - 1; k >= 0; k -- ){
                    var transcoding:DynaTableVideoTranscoding = innerLst.getItemAt( k ) as DynaTableVideoTranscoding;
                    var transcodingJoinUploading:TranscodingJoinUploading = new TranscodingJoinUploading();

                    for( var q:int = DynaTableVideoTranscoding.allProperties.length - 1; q >= 0; q -- ){
                        var transcDesc:PropertyDesc = DynaTableVideoTranscoding.allProperties[q];
                        transcodingJoinUploading[transcDesc.name] = transcoding[transcDesc.name];
                    }

                    for( var i:int = DynaTableAwsS3Upload.allProperties.length - 1; i >= 0; i -- ){
                        var uploadDesc:PropertyDesc = DynaTableAwsS3Upload.allProperties[i] as PropertyDesc;
                        transcodingJoinUploading[uploadDesc.name] = rsltArr[0][uploadDesc.name];
                    }
                    lst.addItem( transcodingJoinUploading );
                }
            }

            onLoaded( lst )
        }

        private var _uploadJoinTranscDateFields:Array;

        override protected function getDateFields():Array{
            if( _uploadJoinTranscDateFields == null ){
                _uploadJoinTranscDateFields = [DynaTableAwsS3Upload.PROP_DESC_applyTimeStamp,
                    DynaTableAwsS3Upload.PROP_DESC_fileRefCreationDate,
                    DynaTableAwsS3Upload.PROP_DESC_uploadedConfirmTimeStamp,
                    DynaTableAwsS3Upload.PROP_DESC_uploadedByClientTime,
                    DynaTableAwsS3Upload.PROP_DESC_fileRefModificationDate].concat( super.getDateFields() );
            }
            return _uploadJoinTranscDateFields;
        }

        override public function set context( value:RootContextModule ):void{
            if( value == context ){
                return;
            }
            super.context = value;

            var colProps:Vector.<PropertyDesc> = DynaTableAwsS3Upload.allProperties;
            const len:int = colProps.length;
            for( var j:int = 0; j < len; j ++ ){
                var desc:PropertyDesc = colProps[j] as PropertyDesc;
                if( desc == DynaTableAwsS3Upload.PROP_DESC_awSAccessKeyId ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_s3Bucket ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_version ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_awSAccessKeyId ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_fileRefCreationDate ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_fileRefCreator ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_fileRefModificationDate ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_uploadedConfirmTimeStamp ||
                        desc == DynaTableAwsS3Upload.PROP_DESC_uploadedByClientTime ){
                    continue;
                }
                var column:GridColumn = new GridColumn();
                column.label = "U:" + desc.name;

                column.dataField = desc.name;
                if( getDateFields().indexOf( desc ) >= 0 ){
                    column.labelFunction = getCellLabelDate;
                }
                column.sortable = true;
                columns.addItem( column );
            }

        }
        ]]></fx:Script>
    <fx:Declarations>
        <data:GridColumn id="colMediaId" dataField="mediaId" label="colMediaId"/>

    </fx:Declarations>
    <fx:Binding source="tranStatus" destination="rfrReloadGrid"/>
    <fx:Binding source="tranLastUpdateTime" destination="rfrReloadGrid"/>
</transcoding:ListTranscoding>