<?xml version="1.0"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    width="100%" height="100%" minWidth="21" minHeight="21"
                    rightClick="onRightClick( event );">
    <fx:Script><![CDATA[
        override public function set toolTip( value:String ):void{
            if( value == null ){
                return;
            }
            if( value != "<dataTip>" ){//@see GridItemRenderer.initializeRendererToolTip
                throw new Error( "Have to be dynamic and set in column or grid !!!" );
            }

            super.toolTip = value;
            /* GridColumn.itemToDataTip(item:Object):String
             {
             const tipFunction:Function = (dataTipFunction != null) ? dataTipFunction : grid.dataTipFunction;
             const tipField:String = (dataTipField) ? dataTipField : grid.dataTipField;
             const tipPath:Array = (tipField) ? [tipField] : dataFieldPath;

             return itemToString(item, tipPath, tipFunction, dataTipFormatter);
             }*/
        }

        protected function onRightClick( event:MouseEvent ):void{
            CONFIG::debugging{
                CC.log( "UIGridCell.onRightClick->arguments:" + arguments.join( "," ) );
            }//debug
        }


        private var _uiGrid:UIGrid;
        [Bindable(event="uiGridChanged")]
        public function get uiGrid():UIGrid{
            return _uiGrid;
        }

        private function set assUIGrid( g:UIGrid ):void{
            if( g != _uiGrid ){
                _uiGrid = g as UIGrid;
                dispatchEvent( new Event( "uiGridChanged" ) );
            }
        }
        ]]></fx:Script>
    <fx:Binding source="gridColumn.uiGrid" destination="assUIGrid"/>
    <fx:Script><![CDATA[
        [Bindable("columnChanged")]
        public function get gridColumn():UIGridColumn{
            return column as UIGridColumn;
        }
        ]]></fx:Script>
</s:GridItemRenderer>
