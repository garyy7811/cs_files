<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark" xmlns:wd="com.flashflexpro.as3lib.win.*"
             blendMode="normal" mouseEnabled="false"
             minWidth="131" minHeight="1" alpha.disabled="0.5">
    <fx:Metadata>[HostComponent("com.flashflexpro.as3lib.win.TiBoTlePanel")]</fx:Metadata>
    <fx:Script>
        <![CDATA[
        /**
         * @private
         */
        override protected function initializationComplete():void{
            useChromeColor = true;
            super.initializationComplete();
        }

        /**
         * @private
         */
        override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void{
            if( getStyle( "borderVisible" ) == true ){
                if( panelBorder != null ){
                    panelBorder.visible = true;
                }
                var cr:Number = getStyle( "cornerRadius" );

                if( cornerRadius != cr ){
                    cornerRadius = cr;

                }
                if( dropShadow != null ){
                    dropShadow.tlRadius = cornerRadius;
                    dropShadow.trRadius = cornerRadius;
                    dropShadow.blRadius = cornerRadius;
                    dropShadow.brRadius = cornerRadius;
                }

                setPartCornerRadii( topMaskRect );
                setPartCornerRadii( background );
                setPartCornerRadii( panelBorder );
                setPartCornerRadii( bottomMaskRect );

                if( borderStroke != null ){
                    borderStroke.color = getStyle( "borderColor" );
                    borderStroke.alpha = getStyle( "borderAlpha" );
                    borderStroke.weight = getStyle( "borderWeight" );
                }
                background.left = background.top = background.right = background.bottom = borderStroke.weight;
                contents.left = contents.top = contents.right = contents.bottom = borderStroke.weight;
            }
            else{
                if( panelBorder != null ){
                    panelBorder.visible = false;
                }
                background.left = background.top = background.right = background.bottom = 0;
                contents.left = contents.top = contents.right = contents.bottom = 0;
            }

            backgroundFill.color = getStyle( "backgroundColor" );
            backgroundFill.alpha = getStyle( "backgroundAlpha" );

            if( winBorder != null ){
                winBorder.updateStyle();
            }

            super.updateDisplayList( unscaledWidth, unscaledHeight );
        }

        /**
         * @private
         */
        private function setPartCornerRadii( target:Rect ):void{
            if( target == null ){
                return;
            }
            target.topLeftRadiusX = cornerRadius;
            target.topRightRadiusX = cornerRadius;
            target.bottomLeftRadiusX = cornerRadius;
            target.bottomRightRadiusX = cornerRadius;
        }

        private var cornerRadius:Number;
        ]]>
    </fx:Script>
    <s:states>
        <s:State name="normal" stateGroups="noWin,nml"/>
        <s:State name="disabled" stateGroups="noWin,dsbl"/>
        <s:State name="normalWin" stateGroups="win,nml"/>
        <s:State name="disabledWin" stateGroups="win,dsbl"/>
    </s:states>

    <s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.32" distance="11" includeIn="win"
                             angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>
    <s:Group left="0" right="0" top="0" bottom="0" id="visibleGroup">

        <!-- top group mask -->
        <!--- @private -->
        <s:Group left="1" top="1" right="1" bottom="1" id="topGroupMask">
            <!--- @private -->
            <s:Rect id="topMaskRect" left="0" top="0" right="0" bottom="0">
                <s:fill>
                    <s:SolidColor alpha="0"/>
                </s:fill>
            </s:Rect>
        </s:Group>

        <!-- bottom group mask -->
        <!--- @private -->
        <s:Group left="1" top="1" right="1" bottom="1" id="bottomGroupMask">
            <!--- @private -->
            <s:Rect id="bottomMaskRect" left="0" top="0" right="0" bottom="0">
                <s:fill>
                    <s:SolidColor alpha="0"/>
                </s:fill>
            </s:Rect>
        </s:Group>

        <!-- layer 1: border -->
        <!--- @private -->
        <s:Rect id="panelBorder" left="0" right="0" top="0" bottom="0">
            <s:stroke>
                <!--- @private -->
                <s:SolidColorStroke id="borderStroke" weight="1"/>
            </s:stroke>
        </s:Rect>

        <!-- layer 2: background fill -->
        <!--- Defines the appearance of the PanelSkin class's background. -->
        <s:Rect id="background" left="1" top="1" right="1" bottom="1">
            <s:fill>
                <!--- @private
             Defines the  PanelSkin class's background fill. The default color is 0xFFFFFF. -->
                <s:SolidColor id="backgroundFill" color="#FFFFFF"/>
            </s:fill>
        </s:Rect>

        <!-- layer 3: contents -->
        <!--- Contains the vertical stack of titlebar content and controlbar. -->
        <s:Group left="1" right="1" top="1" bottom="1" id="contents">
            <s:layout>
                <s:VerticalLayout gap="0" horizontalAlign="justify"/>
            </s:layout>

            <!--- @private -->
            <s:Group id="topGroup" mask="{topGroupMask}" left="0" right="0" top="0" bottom="0">
                <!-- layer 0: title bar fill -->
                <!--- @private -->
                <s:Rect id="tbFill" left="0" right="0" top="0" bottom="1">
                    <s:fill>
                        <s:LinearGradient rotation="90">
                            <s:GradientEntry color="0xE2E2E2"/>
                            <s:GradientEntry color="0xD9D9D9"/>
                        </s:LinearGradient>
                    </s:fill>
                </s:Rect>

                <!-- layer 1: title bar highlight -->
                <!--- @private -->
                <s:Rect id="tbHilite" left="0" right="0" top="0" bottom="0">
                    <s:stroke>
                        <s:LinearGradientStroke rotation="90" weight="1">
                            <s:GradientEntry color="0xEAEAEA"/>
                            <s:GradientEntry color="0xD9D9D9"/>
                        </s:LinearGradientStroke>
                    </s:stroke>
                </s:Rect>

                <!-- layer 2: title bar divider -->
                <!--- @private -->
                <s:Rect id="tbDiv" left="0" right="0" height="1" bottom="0">
                    <s:fill>
                        <s:SolidColor color="0xC0C0C0"/>
                    </s:fill>
                </s:Rect>

                <s:Group id="titleGroup" left="3" right="3" top="2" bottom="2"
                         toolTip="{hostComponent.tbPanel.titleTooltip}">
                    <s:Label maxDisplayedLines="1" width="100%" id="titleLabel" text="{hostComponent.tbPanel.title}"
                             verticalAlign="middle" textAlign="start" fontWeight="bold"/>
                </s:Group>
            </s:Group>

            <!--- @copy spark.components.SkinnableContainer#contentGroup -->
            <s:Group id="contentGroup" width="100%" height="100%" minWidth="0" minHeight="0"
                     clipAndEnableScrolling="true"/>

            <!--- @private -->
            <s:Group id="bottomGroup" minWidth="0" minHeight="0">

                <s:Group left="0" right="0" top="0" bottom="0" mask="{bottomGroupMask}">

                    <!-- layer 0: control bar divider line -->
                    <s:Rect left="0" right="0" top="0" height="1" alpha="0.22">
                        <s:fill>
                            <s:SolidColor color="0x000000"/>
                        </s:fill>
                    </s:Rect>

                    <!-- layer 1: control bar highlight -->
                    <s:Rect left="0" right="0" top="1" bottom="0">
                        <s:stroke>
                            <s:LinearGradientStroke rotation="90" weight="1">
                                <s:GradientEntry color="0xE5E5E5"/>
                                <s:GradientEntry color="0xD8D8D8"/>
                            </s:LinearGradientStroke>
                        </s:stroke>
                    </s:Rect>

                    <!-- layer 2: control bar fill -->
                    <s:Rect left="1" right="1" top="2" bottom="1">
                        <s:fill>
                            <s:LinearGradient rotation="90">
                                <s:GradientEntry color="0xDADADA"/>
                                <s:GradientEntry color="0xC5C5C5"/>
                            </s:LinearGradient>
                        </s:fill>
                    </s:Rect>
                </s:Group>
                <!-- layer 3: control bar -->
                <!--- @copy spark.components.Panel#controlBarGroup -->
                <s:Group id="botleGroup" left="0" right="0" top="1" bottom="1" minWidth="0" minHeight="0"
                         toolTip="{hostComponent.tbPanel.botleTooltip}">
                    <s:Label width="100%" id="botleLabel" text="{hostComponent.tbPanel.botle}"
                             visible="{hostComponent.tbPanel.botle!=null}"
                             includeInLayout="{hostComponent.tbPanel.botle!=null}"
                             verticalAlign="middle" textAlign="start"/>
                </s:Group>
            </s:Group>
        </s:Group>
        <s:Group id="_mouseBlocker" left="1" bottom="1" right="1"
                 includeInLayout="{hostComponent.tbPanel.alert!=null}"
                 visible="{hostComponent.tbPanel.alert!=null}"
                 top="{hostComponent.tbPanel.alert.overTitle?1:(1+topGroup.height)}">
            <s:Rect width="100%" height="100%">
                <s:fill>
                    <s:SolidColor color="0xff0000" alpha="0.01"/>
                </s:fill>
            </s:Rect>
        </s:Group>
    </s:Group>
    <wd:WebWindowSkinResizeBorder window="{hostComponent}" id="winBorder" includeIn="win"
                                  visible="{hostComponent.tbPanel.alert==null}"/>
    <fx:Script><![CDATA[
        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;

        import spark.components.Alert;
        import spark.filters.BlurFilter;

        private var _alert:Alert;

        private function set rfrAlert( ignoreVar:* ):void{
            var alt:TBPanelAlert = hostComponent.tbPanel.alert;
            if( alt != null && _alert == null ){
                _alert = new Alert();
                _alert.maxWidth = hostComponent.width;
                _alert.maxHeight = hostComponent.height;
                _alert.message = alt.message;
                _alert.title = alt.title;
                _alert.buttonsFlag = alt.flags;
                _alert.addEventListener( CloseEvent.CLOSE, onClose );
                _alert.addEventListener( FlexEvent.CREATION_COMPLETE, onAlertCreated );
                _alert.moduleFactory = FlexGlobals.topLevelApplication.moduleFactory;
                _alert.document = FlexGlobals.topLevelApplication.document;

                visibleGroup.addElement( _alert );

                contentGroup.filters = [new BlurFilter()];
                botleGroup.filters = [new BlurFilter()];
                topGroup.filters = alt.overTitle ? [new BlurFilter()] : null;
            }
            else if( alt == null && _alert != null ){
                _alert.removeEventListener( CloseEvent.CLOSE, onClose );
                contentGroup.filters = null;
                botleGroup.filters = null;
                topGroup.filters = null;
                visibleGroup.removeElement( _alert );
                _alert = null;
            }
        }

        private function onAlertCreated( event:FlexEvent ):void{
            _alert.x = ( width - _alert.width ) / 2;
            if( hostComponent.tbPanel.alert.overTitle ){
                _alert.y = ( height - _alert.height ) / 2;
            }
            else{
                _alert.y = ( height - topGroup.height - _alert.height ) / 2 + topGroup.height;
            }
            _alert.removeEventListener( FlexEvent.CREATION_COMPLETE, onAlertCreated );
            _alert.focusManager = hostComponent.focusManager;
            _alert.setFocus();
        }

        private function onClose( event:CloseEvent ):void{
            var alt:TBPanelAlert = hostComponent.tbPanel.alert;
            if( alt.closeHandler != null ){
                alt.closeHandler.apply( alt.closeHandlerThis, [event] );
            }
            hostComponent.tbPanel.alert = null;
            _alert = null;
        }
        ]]></fx:Script>
    <fx:Binding source="hostComponent.tbPanel.alert" destination="rfrAlert"/>
</s:SparkSkin>