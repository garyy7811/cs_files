/**
 * Generated by com.customshow.codegen
 *
 */
package com.customshow.configPerClient{

import mx.events.PropertyChangeEvent;
import com.flashflexpro.as3lib.data.PropertyDesc;
import com.customshow.configPerClient.DynaTableClientConfigOverride;

[Bindable]
[RemoteClass(alias="com.customshow.configPerClient.DynaTableClientConfigUpload")]
public class DynaTableClientConfigUpload extends com.customshow.configPerClient.DynaTableClientConfigOverride {
    public function DynaTableClientConfigUpload(){
    }

    private static var _allProperties:Vector.<PropertyDesc> = null;
    public static function get allProperties():Vector.<PropertyDesc>{
        if( _allProperties == null ){
            _allProperties = properties.concat( com.customshow.configPerClient.DynaTableClientConfigOverride.allProperties );
        }
        return _allProperties;
    }
    private static var _properties:Vector.<PropertyDesc> = null;
    public static function get properties():Vector.<PropertyDesc>{
        if( _properties == null ){
            _properties = new <PropertyDesc>[ PROP_DESC_uploadConcurrentNum, 
                PROP_DESC_uploadSizeLimitPerFileInM, 
                PROP_DESC_uploadTotalUploadLimitInG
            ];
        }
        return _properties;
    }
    public static const PROP_DESC_uploadConcurrentNum:PropertyDesc = new PropertyDesc( "uploadConcurrentNum" , false, true, "");
    public var uploadConcurrentNum:Number;

    public static const PROP_DESC_uploadSizeLimitPerFileInM:PropertyDesc = new PropertyDesc( "uploadSizeLimitPerFileInM" );
    public var uploadSizeLimitPerFileInM:Number;

    public static const PROP_DESC_uploadTotalUploadLimitInG:PropertyDesc = new PropertyDesc( "uploadTotalUploadLimitInG" , false, true, "");
    public var uploadTotalUploadLimitInG:Number;

}
}