<?xml version="1.0"?>
<!--
  Created by gary.y on 4/8/2016.
-->
<utils:MxmlEventDispatcher xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:utils="com.flashflexpro.as3lib.utils.*"
                           xmlns:configperclient="com.customshow.configPerClient.*"
                           implements="com.flashflexpro.as3lib.IWithContext">
    <fx:Script>
        import com.flashflexpro.as3lib.rpc.RpcSpringMvcPost;
        import com.flashflexpro.as3lib.utils.RootContextModule;


        [Bindable]
        public var _context:RootContextModule;

        [Bindable(event="contextChanged")]
        public function get context():RootContextModule{
            return _context;
        }

        public function set context( value:RootContextModule ):void{
            if( value != _context ){
                _context = value;
                dispatchEvent( new Event( "contextChanged" ) );
            }
        }

        [Bindable(event="contextChanged")]
        public function get rootContextClientConfig():RootContextClientConfig{
            return _context as RootContextClientConfig;
        }

        [Bindable]
        public var clientId:String = "1";

        [Bindable]
        public var config:DynaTableClientConfig;


        public function query():void{
            lastErrorEvent = null;
            var rpcSpringMvcPost:RpcSpringMvcPost = new ConfigPerClientService( context ).loadDynaTableClientConfig(
                    onConfigObjBack, onRpcError, clientId );
            rpcSpringMvcPost.callRemote();
        }

        protected function onConfigObjBack( o:Object ):Boolean{
            config = o as DynaTableClientConfig;
            return true;
        }

        [Bindable]
        public var lastErrorEvent:ErrorEvent;

        protected function onRpcError( event:ErrorEvent ):void{
            lastErrorEvent = event;
        }

        internal function deleteFormat( format:DynaTableClientConfigTranscodeFormat ):void{

            new ConfigPerClientService( context ).deleteTranscodeFormat( function ( s:Boolean ):void{
                if( ! s ){
                    throw new Error();
                }
            }, null, clientId, format.identification ).callRemote();

        }

    </fx:Script>
    <fx:Declarations>
        <configperclient:PerClientConfigGeneralGrid id="clientGeneral" perClientConfigLoadById="{this}"
                                                    context="{context}"/>
        <configperclient:PerClientConfigUploadGrid id="clientUpload" perClientConfigLoadById="{this}"
                                                   context="{context}"/>
        <configperclient:PerClientConfigTranscodeGrid id="transcodeGeneral" perClientConfigLoadById="{this}"
                                                      context="{context}"/>
        <configperclient:TranscodeConfigFormatGridPerClient id="transcodeFormats" perClientConfigLoadById="{this}"
                                                            context="{context}"/>
    </fx:Declarations>
</utils:MxmlEventDispatcher>
