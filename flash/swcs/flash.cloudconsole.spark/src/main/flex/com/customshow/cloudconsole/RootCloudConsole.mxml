<?xml version="1.0"?>
<!--
  Created by yanggang on 3/26/2016.
-->
<utils:RootContextApp xmlns:fx="http://ns.adobe.com/mxml/2009"
                      xmlns:ap="org.apache.flex.collections.*"
                      xmlns:upload="com.customshow.awsS3Upload.*"
                      xmlns:utils="com.flashflexpro.as3lib.utils.*"
                      xmlns:configperclient="com.customshow.configPerClient.*"
                      xmlns:videotranscoding="com.customshow.videotranscoding.*"
                      xmlns:win="com.flashflexpro.as3lib.win.*"
                      xmlns:download="com.customshow.awsS3Download.*"
                      xmlns:reports="com.customshow.reporting.reports.*"
                      xmlns:reporting="com.customshow.reporting.*" xmlns:searchRes="com.customshow.search.indexing.*"
                      implements="com.flashflexpro.as3lib.win.IDividable"
                      escalateFromInside="onEscalated( event );">
    <fx:Script><![CDATA[
        import com.customshow.awsS3Upload.DynaTableAwsS3Upload;
        import com.customshow.configPerClient.DynaTableClientConfigTranscodeFormat;
        import com.customshow.configPerClient.LabyrinthEncodingConfig;
        import com.customshow.configPerClient.PerClientConfigLoadById;
        import com.customshow.reporting.CsSearchModelAbstract;
        import com.customshow.search.indexing.ListResBySearching;
        import com.customshow.videotranscoding.ListTranscodingByStatus;
        import com.customshow.videotranscoding.ListTranscodingJoinUploads;
        import com.customshow.videotranscoding.TranscodingFormatGrid;
        import com.flashflexpro.as3lib.IWithContext;
        import com.flashflexpro.as3lib.rpc.RpcSpringMvcPost;
        import com.flashflexpro.as3lib.utils.EscalateFromContextEvent;
        import com.flashflexpro.as3lib.utils.RootContextModule;
        import com.flashflexpro.as3lib.utils.ToolTipExm;
        import com.flashflexpro.as3lib.win.Dividable;

        override public function appInit():void{
            super.appInit();

            var child1:Dividable = new Dividable( null, searchRoot.listResBySearching );
            //            var child1:Dividable = new Dividable( null, searchModelShowDuration );
            var child2:Dividable = new Dividable( null, transcodeRoot.listESTranscodingJoinUploads );

            setChildren( null, new Dividable( this, null, child1, child2, true ) );

            //            child2.divide( nvReportingConsole, false, true );
        }

        internal function addNewWinQueryDownLoadByUserId():void{
            floatingWindows.addWin( uploadRoot.addUploadByUserId() );
        }

        internal function addNewWinQueryTranscodingByUpload( selectedUpload:DynaTableAwsS3Upload = null ):void{
            var bucketKey:String = selectedUpload == null ? null : selectedUpload.s3BucketKey;

            floatingWindows.addWin( transcodeRoot.addListTranscodingByBucketkey( bucketKey ) );
        }

        internal function addNewWinQueryTranscodeWithUpload():void{
            var rt:ListTranscodingJoinUploads = new ListTranscodingJoinUploads();
            rt.context = transcodeRoot;
            floatingWindows.addWin( rt );
        }

        internal function addNewWinQueryTranscodingByStatus( clientId:Number = NaN ):void{
            var rt:ListTranscodingByStatus = new ListTranscodingByStatus();
            rt.context = transcodeRoot;
            floatingWindows.addWin( rt );
        }

        internal function addNewWinClientConig( clientId:Number = NaN ):void{
            var rt:PerClientConfigLoadById = new PerClientConfigLoadById();
            rt.context = transcodeRoot;
            floatingWindows.addWin( rt );
        }

        internal function addLabyrinth():void{
            var rt:LabyrinthEncodingConfig = new LabyrinthEncodingConfig();
            rt.context = configRoot;
            floatingWindows.addWin( rt );
        }


        internal function addSolrSearch( inst:CsSearchModelAbstract ):void{
            inst.context = reportingRoot;
            floatingWindows.addWin( inst );
        }

        internal function addReporting():void{
            var csNvReportingConsole:CSNvReportingConsole = new CSNvReportingConsole();
            csNvReportingConsole.context = reportingRoot;
            floatingWindows.addWin( csNvReportingConsole );
        }

        internal function addResSearch():void{
            var m:ListResBySearching = new ListResBySearching();
            m.context = searchRoot;
            floatingWindows.addWin( m );
        }

        override public function getTipRpc():RpcSpringMvcPost{
            return null;//todo:
        }

        override public function moreHelp( tm:ToolTipExm ):void{
            floatingWindows.addWin( tm );
        }


        private var _child1:Dividable;

        [Bindable(event="child1Changed")]
        public function get child1():Dividable{
            return _child1;
        }


        public function setChildren( s:IWithContext, value:Dividable, c2:Dividable = null, isv:Boolean = false ):void{
            if( value != _child1 ){
                _child1 = value;
                if( _child1 != null ){
                    _child1.setParent( this );
                }
                dispatchEvent( new Event( "child1Changed" ) );
            }
        }

        public function set context( m:RootContextModule ):void{
            throw  new Error( "Not Me!" )
        }

        public function get context():RootContextModule{
            return this;
        }

        private function onEscalated( event:EscalateFromContextEvent ):void{
            if( event.args.length == 2 ){
                var formatGrid:TranscodingFormatGrid = event.args[0] as TranscodingFormatGrid;
                var format:DynaTableClientConfigTranscodeFormat = event.args[1] as DynaTableClientConfigTranscodeFormat;

                if( formatGrid != null && format != null && format.destination != null ){
                    floatingWindows.addWin( new WinTmpPlayerModel( downloadRoot, formatGrid, format ) );
                    return;
                }

                var bucketkey:String = event.args[1] as String;
                if( bucketkey != null && bucketkey.split( "/" ).length == 4 ){
                    floatingWindows.addWin(
                            transcodeRoot.createNewVideoTranscodingWithFormats( event.args[0], bucketkey ) );
                    return;
                }
            }
        }

        [Bindable]
        public var downloadRootUrl:String;

        [Bindable]
        public var awsS3RTMPUrl:String;

        [Bindable]
        public var nvMySqlUrl:String;

        [Bindable]
        public var reporingApiUrl:String;

        [Bindable]
        public var resIndexSearchUrl:String;

        ]]></fx:Script>
    <fx:Declarations>
        <upload:RootContextUpload id="uploadRoot"
                                  parent="{this}" restUrl="{restUrl}" urlExtra="{urlExtra}"
                                  serverHandleType="{serverHandleType}"
        />
        <download:RootContextDownload id="downloadRoot"
                                      parent="{this}" restUrl="{restUrl}" urlExtra="{urlExtra}"
                                      serverHandleType="{serverHandleType}"
                                      downloadRootUrl="{downloadRootUrl}" awsS3RTMPUrl="{awsS3RTMPUrl}/cfx/st"
        />
        <videotranscoding:RootContextTranscoding id="transcodeRoot"
                                                 parent="{this}" restUrl="{restUrl}" urlExtra="{urlExtra}"
                                                 serverHandleType="{serverHandleType}"
                                                 rootContextClientConfig="{configRoot}"
        />
        <configperclient:RootContextClientConfig id="configRoot"
                                                 parent="{this}" restUrl="{restUrl}" urlExtra="{urlExtra}"
                                                 serverHandleType="{serverHandleType}"
        />
        <searchRes:RootContextSearchRes id="searchRoot"
                                        parent="{this}" restUrl="{resIndexSearchUrl}" urlExtra="{urlExtra}"
                                        serverHandleType="{serverHandleType}"
        />
        <reports:CSNvReportingConsole sqlUrl="{nvMySqlUrl}" id="nvReportingConsole">
            <reports:context>
                <utils:RootContextModule id="reportingRoot" serverHandleType="{rootApp.serverHandleType}"
                                         parent="{rootApp}" urlExtra="{rootApp.urlExtra}" restUrl="{reporingApiUrl}"/>

            </reports:context>
        </reports:CSNvReportingConsole>

        <reporting:CsSearchModelShowDuration id="searchModelShowDuration" context="{reportingRoot}"
                                             overridingServiceName="showduration"/>

        <win:WinFloatingContainer id="floatingWindows" context="{this}"/>
    </fx:Declarations>

    <utils:callInNext>
        <utils:CallOnceInNextFrame/>
    </utils:callInNext>
    <utils:pressedKeys>
        <ap:ArrayList/>
    </utils:pressedKeys>
    <utils:rpcOnAir>
        <ap:ArrayList/>
    </utils:rpcOnAir>
    <utils:rpcWaitQue>
        <ap:ArrayList/>
    </utils:rpcWaitQue>
</utils:RootContextApp>