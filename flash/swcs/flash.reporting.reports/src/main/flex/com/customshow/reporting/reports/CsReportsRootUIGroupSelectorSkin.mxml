<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled=".5" width="155">

    <!-- host component -->
    <fx:Metadata>
    <![CDATA[
        [HostComponent("com.customshow.reporting.reports.CsReportsRootUIGroupSelector")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
        /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
        static private const contentFill:Array = [ "bgFill" ];

        /**
         * @private
         */
        override public function get contentItems():Array{ return contentFill; }

        /**
         * @private
         */
        override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void{
            if( getStyle( "borderVisible" ) == false ){
                if( border )
                    border.visible = false;
                if( background ){
                    background.left = background.top = background.right = background.bottom = 0;
                }
                if( scroller )
                    scroller.minViewportInset = 0;
            }
            else{
                if( border )
                    border.visible = true;
                if( background ){
                    background.left = background.top = background.right = background.bottom = 1;
                }
                if( scroller )
                    scroller.minViewportInset = 1;
            }

            if( dropShadow )
                dropShadow.visible = getStyle( "dropShadowVisible" );

            openButton.setStyle( "cornerRadius", getStyle( "cornerRadius" ) );

            if( borderStroke ){
                borderStroke.color = getStyle( "borderColor" );
                borderStroke.alpha = getStyle( "borderAlpha" );
            }
            super.updateDisplayList( unscaledWidth, unscaledHeight );
        }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="open"/>
        <s:State name="disabled"/>
    </s:states>

    <s:PopUpAnchor id="popUp" displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
                   top="0" bottom="0" itemDestructionPolicy="auto"
                   popUpPosition="below" popUpWidthMatchesAnchorWidth="false">

        <s:Group id="dropDown">

            <!--- @private -->
            <s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.45" distance="7"
                                     angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>

            <!--- @private -->
            <s:Rect id="border" left="0" right="0" top="0" bottom="0">
                <s:stroke>
                    <!--- border stroke @private -->
                    <s:SolidColorStroke id="borderStroke" weight="1"/>
                </s:stroke>
            </s:Rect>

            <!-- fill -->
            <!--- Defines the appearance of drop-down list's background fill. -->
            <s:Rect id="background" left="1" right="1" top="1" bottom="1">
                <s:fill>
                    <!---
                     The color of the drop down's background fill.
                     The default color is 0xFFFFFF.
                    -->
                    <s:SolidColor id="bgFill" color="0xFFFFFF"/>
                </s:fill>
            </s:Rect>

            <s:VGroup horizontalAlign="center" paddingBottom="6" paddingTop="6">
                <s:Group width="80%" visible="{hostComponent.filterOn}" includeInLayout="{hostComponent.filterOn}">
                    <s:TextInput text="@{hostComponent.filterStr}" id="filterTextInput" click="filterTextInput.setFocus();"
                                 contentBackgroundColor="#5b5b5b" borderColor="#ffffff" width="100%"
                                 focusIn="searchIcon.visible = false;" focusOut="if(searchIcon!=null)searchIcon.visible=true"/>
                    <s:Image source="@Embed(source='/search.png')" id="searchIcon" x="{searchIcon.y}" y="{ ( filterTextInput.height-searchIcon.height)/2 }"/>
                </s:Group>
                <s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
                    <s:Label text="Select:" width="100%"/>
                    <s:Button label="All" click="hostComponent.selectAll_None( true );" width="45"/>
                    <s:Button label="None" click="hostComponent.selectAll_None( false );" width="52"/>
                </s:HGroup>
                <s:Line width="85%">
                    <s:stroke>
                        <s:SolidColorStroke color="#bbbbff"/>
                    </s:stroke>
                </s:Line>
                <s:Scroller id="scroller" width="100%" height="100%">
                    <!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
                    <s:DataGroup id="dataGroup" itemRenderer="spark.skins.spark.DefaultItemRenderer">
                        <s:layout>
                            <s:VerticalLayout gap="0" horizontalAlign="contentJustify" requestedMinRowCount="1" requestedMaxRowCount="20"/>
                        </s:layout>
                    </s:DataGroup>
                </s:Scroller>
            </s:VGroup>
        </s:Group>
    </s:PopUpAnchor>

    <s:Button id="openButton" left="0" right="0" top="0" bottom="0" focusEnabled="false" tabEnabled="false"
              skinClass="spark.skins.spark.DropDownListButtonSkin"/>

    <s:Label id="labelDisplay" verticalAlign="middle" maxDisplayedLines="1"
             mouseEnabled="false" mouseChildren="false" textAlign="center"
             left="7" right="30" top="2" bottom="2" width="75" verticalCenter="1"/>

</s:SparkSkin>
