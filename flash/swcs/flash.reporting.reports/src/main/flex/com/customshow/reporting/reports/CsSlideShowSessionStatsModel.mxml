<?xml version="1.0"?>
<!--
  Created by gary.yang.customshow on 2/17/2015.
-->
<local:CsGridModel xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:local="com.customshow.reporting.reports.*"
                   xmlns:ap="org.apache.flex.collections.*" xmlns:rpc="com.flashflexpro.as3lib.rpc.*"
                   sortColDataField="{count}" sortColDesc="true">
    <fx:Metadata>
        [Event(name="exportCSV", type="flash.events.Event")]
    </fx:Metadata>
    <fx:Script><![CDATA[
        import com.customshow.reporting.solr.query.CSReportingShowSessionStats;

        private function set rfrReloadBoth( v:* ):void{
            nvReportConsole.context.callInNext.putIn( reloadTotalNum );
            rfrReloadGrid = true;
        }

        private var _rpcLoadTotalNum:RpcSpringMvcPost;

        public function reloadTotalNum():void{
            if( nvReportConsole.context.urlExtra == null || nvReportConsole.selectedGroupIdArray == null || ! visible ){
                return;
            }
            _rpcLoadTotalNum =
                    new CSReportingShowSessionStats( nvReportConsole.context ).queryTotal( onTotalLoaded, onError,
                            nvReportConsole.selectedGroupIdArray, nvReportConsole.dateFrom.getTime(),
                            nvReportConsole.dateTo.getTime() + 24 * 3600 * 1000 );
            _rpcLoadTotalNum.callRemote();

            totalView = null;
            totalUniqView = null;
            totalAvgSlideViewed = null;
            totalAvgTimeViewed = null;
        }

        private function onTotalLoaded( arr:Array ):Boolean{
            var n:Object = arr[0];
            var p:Object = arr[1];

            var nv:uint = 0;
            var pv:uint = 0;

            nv = n[count.dataField];
            pv = p[count.dataField];
            totalView = nv.toString();
            totalViewDivPer = Math.ceil( ( nv - pv ) * 1000 / pv ) / 10;

            nv = n[uniq_viewerNum.dataField];
            pv = p[uniq_viewerNum.dataField];
            totalUniqView = nv.toString();
            totalUniqViewDivPer = Math.ceil( ( nv - pv ) * 1000 / pv ) / 10;

            nv = n[avg_viewedSlideNum.dataField];
            pv = p[avg_viewedSlideNum.dataField];
            totalAvgSlideViewed = nv.toString();
            totalAvgSlideViewedDivPer = Math.ceil( ( nv - pv ) * 1000 / pv ) / 10;

            nv = n[avg_dura.dataField];
            pv = p[avg_dura.dataField];
            totalAvgTimeViewed = CsQuickRpc.epicTimeToHMS( Math.abs( nv ) );
            totalAvgTimeViewedDivPer = Math.ceil( ( nv - pv ) * 1000 / pv ) / 10;

            _rpcLoadTotalNum = null;
            return true;
        }

        [Bindable]
        public var totalView:String;
        [Bindable]
        public var totalViewDivPer:Number;


        [Bindable]
        public var totalUniqView:String;
        [Bindable]
        public var totalUniqViewDivPer:Number;


        [Bindable]
        public var totalAvgSlideViewed:String;
        [Bindable]
        public var totalAvgSlideViewedDivPer:Number;

        [Bindable]
        public var totalAvgTimeViewed:String;

        [Bindable]
        public var totalAvgTimeViewedDivPer:Number;
        ]]></fx:Script>
    <fx:Binding source="visible" destination="rfrReloadBoth"/>
    <fx:Binding source="nvReportConsole.dateFrom" destination="rfrReloadBoth"/>
    <fx:Binding source="nvReportConsole.dateTo" destination="rfrReloadBoth"/>
    <fx:Binding source="nvReportConsole.selectedGroupIdArray" destination="rfrReloadBoth"/>
    <fx:Script><![CDATA[
        import com.customshow.solr.query.web.common.DtoFacetResult;
        import com.flashflexpro.as3lib.rpc.RpcSpringMvcPost;

        private var _rowNumPerLoad:int = 30;
        public function get rowNumPerLoad():int{
            return _rowNumPerLoad;
        }

        private function loadNextGrid():void{
            if( rpcLoadGrid != null || nvReportConsole.selectedGroupIdArray == null || ! visible ){
                return;
            }
            if( lastQueryResult == null ){
                rows = null;
            }

            rpcLoadGrid = new CSReportingShowSessionStats( nvReportConsole.context ).queryGrid( onLoaded, onError,
                    nvReportConsole.selectedGroupIdArray, nvReportConsole.dateFrom.getTime(),
                    nvReportConsole.dateTo.getTime() + 24 * 3600 * 1000, sortColDataField.dataField, sortColDesc,
                    ( lastQueryResult == null ? 0 : rows.length ), rowNumPerLoad, queryTerms );
            rpcLoadGrid.callRemote();
        }

        override public function onLoaded( rslt:DtoFacetResult ):Boolean{
            super.onLoaded( rslt );

            if( lastQueryResult.rNumFound > 0 ){
                if( rows == null ){
                    rows = new ArrayList();
                }
                const len:int = lastQueryResult.rQueryRecords.length;
                for( var j:int = 0; j < len; j ++ ){
                    rows.addItem( lastQueryResult.rQueryRecords[j] );
                }
            }

            rpcLoadGrid = null;
            return true;
        }


        override protected function onError( ev:Event ):void{
            super.onError( ev );
            rpcLoadGrid = null;
        }

        override public function loadMore():void{
            loadNextGrid();
        }

        private function epicTimeToHMS( r:Object, col:CsGridColModel ):String{
            return CsQuickRpc.epicTimeToHMS( r[col.dataField] );
        }

        private function epicTimeToDate( r:Object, col:CsGridColModel ):String{
            return CsQuickRpc.epicTimeToDate( r[col.dataField] );
        }

        private function avgShowSlideViewNum( r:Object, col:CsGridColModel ):String{
            var val:Number = r[col.dataField];
            return Math.ceil( val * 10 ) / 10 + "";
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <local:CsGridColModel id="showId" dataField="val" sortable="false" label="Show ID"/>
        <local:CsGridColModel id="createdTime" dataField="createdTime" sortable="true" label="createdTime"
                              labelFunction="epicTimeToDate"/>

        <local:CsGridColModel id="ownerFirstName" dataField="ownerFirstName" sortable="false" label="First Name (Owner)"
                              width="85"/>
        <local:CsGridColModel id="ownerLastName" dataField="ownerLastName" sortable="false" label="Last Name (Owner)"
                              width="85"/>
        <local:CsGridColModel id="ownerEmail" dataField="ownerEmail" sortable="false" label="Email (Owner)" width="220"/>
        <local:CsGridColModel id="showName" dataField="showName" sortable="false" label="SlideShow Name"/>
        <local:CsGridColModel id="lastViewedTime" dataField="lastViewedTime" sortable="true" label="Last Viewed"
                              labelFunction="epicTimeToDate" width="158"/>
        <local:CsGridColModel id="lastUpdateTime" dataField="lastUpdateTime" sortable="true" label="Last Modified"
                              labelFunction="epicTimeToDate" width="158"/>
        <local:CsGridColModel id="uniq_viewerNum" dataField="uniq_viewerNum" sortable="true" label="Unique Viewers"
                              bottomColor="#CC923E" width="70"/>
        <local:CsGridColModel id="count" dataField="count" sortable="true" label="SlideShow Views"
                              bottomColor="#494B91" width="58"/>
        <local:CsGridColModel id="avg_slideNum" dataField="avg_slideNum" sortable="true" label="Slides in SlideShow"
                              width="65"/>
        <local:CsGridColModel id="avg_viewedSlideNum" dataField="avg_viewedSlideNum" sortable="true"
                              label="Slides Viewed (Avg.)" labelFunction="avgShowSlideViewNum" bottomColor="#8FC2C7"
                              width="64"/>
        <local:CsGridColModel id="avg_dura" dataField="avg_dura" sortable="true" label="Time Viewed (Avg.)"
                              labelFunction="epicTimeToHMS" bottomColor="#C06BC0" width="65"/>
        <ap:ArrayList id="columns">
            <fx:Object>{showId}</fx:Object>
            <!--<fx:Object>{createdTime}</fx:Object>-->

            <fx:Object>{showName}</fx:Object>
            <fx:Object>{ownerFirstName}</fx:Object>
            <fx:Object>{ownerLastName}</fx:Object>
            <fx:Object>{ownerEmail}</fx:Object>
            <fx:Object>{lastViewedTime}</fx:Object>
            <fx:Object>{lastUpdateTime}</fx:Object>
            <fx:Object>{uniq_viewerNum}</fx:Object>
            <fx:Object>{count}</fx:Object>
            <fx:Object>{avg_slideNum}</fx:Object>
            <fx:Object>{avg_viewedSlideNum}</fx:Object>
            <fx:Object>{avg_dura}</fx:Object>
        </ap:ArrayList>

        <rpc:RpcListSideLoadOnRun id="loadOnRealtime" visibleRowIndices="{visibleRowIndices}" itemList="{rows}"
                                  isItemLoaded="{isSideLoaded}" fireRpc="{getSide}"
                                  callInNext="{context.callInNext}"/>
    </fx:Declarations>
    <fx:Script><![CDATA[
        import mx.events.CollectionEvent;

        private function isSideLoaded( row:Object ):Boolean{
            return row[showName.dataField] != null;
        }

        private function getSide( rows:Array ):RpcSpringMvcPost{
            var rpc:RpcSpringMvcPost = new RpcSpringMvcPost();
            rpc.model = nvReportConsole.context;
            rpc.restUrl = nvReportConsole.sqlUrl + "/amf";
            rpc.serverHandleType = RpcSpringMvcPost.SERVER_TYPE_AWS_API_GATEWAY_JSON;
            rpc.serviceName = "reports";
            rpc.remoteMethodName = "loadShowOwnerMeta";
            rpc.args = [];

            const len:int = rows.length;
            for( var j:int = 0; j < len; j ++ ){
                rpc.args.push( rows[j]["val"].toString() );
            }

            rpc.callBackOnObjResult = onSideLoaded;

            rpc.callRemote();
            return rpc;
        }

        private function onSideLoaded( obj:Object ):Boolean{
            if( rows == null ){
                return true;
            }
            const len:int = rows.length;
            for( var j:int = 0; j < len; j ++ ){
                var r:Object = rows.getItemAt( j );
                for( var showId:String in obj ){
                    if( String( r.val ) == showId ){
                        var arr:Array = obj[showId];
                        r.showName = arr[0];
                        r.ownerFirstName = arr[1];
                        r.ownerLastName = arr[2];
                        r.ownerEmail = arr[3];
                        loadOnRealtime.onEachItemLoad( r );
                        break;
                    }
                }
            }
            nvReportConsole.context.callInNext.putIn( rows.dispatchEvent, null,
                    [new CollectionEvent( CollectionEvent.COLLECTION_CHANGE )] );
            return true;
        }
        ]]></fx:Script>

    <fx:Script><![CDATA[
        import mx.binding.utils.ChangeWatcher;

        private var _loadingAllWatcher:ChangeWatcher;

        public function loadAll():void{
            nvReportConsole.setLoadingAllStatus( true, this );
            if( lastQueryResult != null && lastQueryResult.rNumFound == rows.length ){
                triggerMetaLoader();
                nvReportConsole.setLoadingAllStatus( false, this );
                return;
            }
            _loadingAllWatcher = ChangeWatcher.watch( this, "rpcLoadGrid", rpcLoadGridChanged );
            loadNextGrid();
        }

        private function rpcLoadGridChanged( ev:Event ):void{
            triggerMetaLoader();

            if( lastQueryResult.rQueryRecords.length > 0 ){
                nvReportConsole.context.callInNext.putIn( loadNextGrid, null, null, 20 );
            }
            else{
                _loadingAllWatcher.unwatch();
                if( loadOnRealtime.numLoading > 0 ){
                    _loadingAllWatcher = ChangeWatcher.watch( loadOnRealtime, "numLoading", chkGridAllLoaded );
                }
                else{
                    chkGridAllLoaded();
                }
            }
        }

        private function chkGridAllLoaded( ev:Event = null ):void{
            if( loadOnRealtime.numLoading == 0 ){
                _loadingAllWatcher.unwatch();
                _loadingAllWatcher = null;
                nvReportConsole.setLoadingAllStatus( false, this );
            }
        }

        private function triggerMetaLoader():void{
            var idxArr:Vector.<int> = new Vector.<int>();
            rows.source.forEach( function ( r:Object, i:int, arr:Array ):void{
                if( r.ownerEmail == null ){
                    idxArr.push( i );
                }
            } );
            loadOnRealtime.visibleRowIndices = idxArr;
        }
        ]]></fx:Script>
</local:CsGridModel>