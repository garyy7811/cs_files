<?xml version="1.0"?>
<!--
  Created by gary.yang.customshow on 5/29/2015.
-->
<as3lib:MxmlEventDispatcher xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:as3lib="com.flashflexpro.as3lib.utils.*"
                            implements="com.flashflexpro.as3lib.IWithContext">
    <fx:Script><![CDATA[
        import com.customshow.solr.query.web.common.DtoFacetResult;
        import com.flashflexpro.as3lib.rpc.RpcSpringMvcPost;
        import com.flashflexpro.as3lib.utils.CSV;
        import com.flashflexpro.as3lib.utils.RootContextModule;

        import org.apache.flex.collections.ArrayList;

        [Bindable]
        public var visible:Boolean = false;

        [Bindable]
        public var nvReportConsole:CSNvReportingConsole;


        private var _context:RootContextModule;
        [Bindable(event="contextChanged")]
        public function get context():RootContextModule{
            return _context;
        }

        public function set context( value:RootContextModule ):void{
            if( value != _context ){
                _context = value;
                dispatchEvent( new Event( "contextChanged" ) );
            }
        }


        [Bindable]
        public var visibleRowIndices:Vector.<int>;

        [Bindable]
        public var sortColDataField:CsGridColModel;

        [Bindable]
        public var sortColDesc:Boolean;

        [Bindable]
        public var lastQueryResult:DtoFacetResult;

        [Bindable]
        public var rpcLoadGrid:RpcSpringMvcPost;


        [Bindable]
        public var userInputStr:String;

        [Bindable]
        public var queryTerms:Vector.<String>;


        public function trimUserInput( target:String ):String{
            if( target.length == 0 ){
                queryTerms = null;
                return "";
            }
            if( target.substr( 0, 1 ) == " " ){
                target = target.substr( 1 );
            }
            queryTerms = strIntoQueryTerms( target );
            return target;
        }


        private static const queryRegex:RegExp = new RegExp( "\".{1,}?\"", "g" );

        private static function strIntoQueryTerms( txtTarget:String ):Vector.<String>{
            if( txtTarget == null || txtTarget == "" ){
                return null;
            }
            var rslt:Vector.<String> = new <String>[];

            var _lastArr:Array = [];
            while( true ){
                var arr:Array = queryRegex.exec( txtTarget );
                if( ( arr == null || arr.length == 0  ) && _lastArr.length == 0 ){
                    rslt.push( txtTarget );
                    break;
                }

                //1st
                if( _lastArr.length == 0 && arr.length > 0 ){
                    if( arr.index > 0 ){
                        rslt.push( txtTarget.substring( 0, arr.index ) );
                    }
                    rslt.push( arr[0] );
                }
                //last one
                else if( ( arr == null || arr.length == 0  ) && _lastArr.length > 0 ){
                    if( _lastArr.index + _lastArr[0].length < txtTarget.length ){
                        rslt.push( txtTarget.substring( _lastArr.index + _lastArr[0].length ) );
                    }
                    break;
                }
                //none null
                else{
                    if( _lastArr.index + _lastArr[0].length < arr.index ){
                        rslt.push( txtTarget.substring( _lastArr.index + _lastArr[0].length, arr.index ) );
                    }
                    rslt.push( arr[0] );
                }

                _lastArr = arr;
            }
            return rslt;
        }


        public function reloadGrid():void{
            lastQueryResult = null;
            loadMore();
        }

        public function loadMore():void{
            throw new Error( " implement this abstract method !! " );
        }

        public function onLoaded( rslt:DtoFacetResult ):Boolean{
            lastQueryResult = rslt;
            return true;
        }

        protected function onError( ev:Event ):void{
            lastQueryResult = null;
        }

        [Bindable]
        public var columns:ArrayList;

        [Bindable]
        public var rows:ArrayList = new ArrayList();


        public function exportCSV():String{

            var columns:ArrayList = getExportingColumns();
            var colMdl:CsGridColModel;
            var colLen:int = columns.length;

            var headerArr:Array = [];
            for( var p:int = 0; p < colLen; p ++ ){
                colMdl = columns.getItemAt( p ) as CsGridColModel;
                if( colMdl.exportable ){
                    headerArr.push( CSV.filterCsvCellForExcel( colMdl.label ) );
                }
            }
            var csvStr:String = headerArr.join( "," );

            var rowsLen:int = rows.length;
            for( var i:int = 0; i < rowsLen; i ++ ){
                var r:Object = rows.getItemAt( i );

                var csvRow:Array = [];
                for( var j:int = 0; j < colLen; j ++ ){
                    colMdl = columns.getItemAt( j ) as CsGridColModel;
                    var cell:String;
                    if( colMdl.exportable ){
                        if( colMdl.labelFunction != null ){
                            cell = colMdl.labelFunction.apply( null, [r, colMdl] );
                        }
                        else{
                            cell = r[colMdl.dataField];
                        }
                        cell = CSV.filterCsvCellForExcel( cell );
                        csvRow.push( cell );
                    }
                }
                csvStr += "\n";
                csvStr += csvRow.join( "," );
            }
            return csvStr;
        }

        protected function getExportingColumns():ArrayList{
            return columns;
        }

        protected function set rfrReloadGrid( v:* ):void{
            nvReportConsole.context.callInNext.putIn( reloadGrid );
        }
        ]]>
	</fx:Script>
    <fx:Binding source="visible" destination="rfrReloadGrid"/>
    <fx:Binding source="sortColDataField" destination="rfrReloadGrid"/>
    <fx:Binding source="sortColDesc" destination="rfrReloadGrid"/>
    <!--<fx:Binding source="visibleRowIndices" destination="rfrReloadGrid"/> wrong! dead cirle!-->
    <fx:Binding source="userInputStr" destination="rfrReloadGrid"/>
    <fx:Binding source="nvReportConsole.context" destination="context"/>


</as3lib:MxmlEventDispatcher>
